// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`module a basic model 1`] = `
"declare module "shiro-orm" {
    export type Account = ResultRecord & {
        email: string;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
    declare const get: {
        /* Get a single account record */
        account: DeepCallable<GetQuery[keyof GetQuery], Account | null>;
        /* Get multiple account records */
        accounts: DeepCallable<GetQuery[keyof GetQuery], Accounts>;
    };
    declare const count: {
        /* Count multiple account records */
        accounts: DeepCallable<CountQuery[keyof CountQuery], number>;
    };
    declare const set: {
        /* Set a single account record */
        account: DeepCallable<SetQuery[keyof SetQuery], Account | null>;
        /* Set multiple account records */
        accounts: DeepCallable<SetQuery[keyof SetQuery], Accounts>;
    };
    declare const add: {
        /* Add a single account record */
        account: DeepCallable<AddQuery[keyof AddQuery], Account | null>;
    };
    declare const remove: {
        /* Remove a single account record */
        account: DeepCallable<RemoveQuery[keyof RemoveQuery], Account | null>;
        /* Remove multiple account records */
        accounts: DeepCallable<RemoveQuery[keyof RemoveQuery], Accounts>;
    };
    declare const batch: <TQueries extends [
        Promise,
        ...Array<Promise>
    ] | Array<Promise>>(operations: () => TQueries, queryOptions?: Record<string, unknown>) => Promise<PromiseTuple<TQueries>>;
    declare const list: {
        /* List all model definitions */
        models: DeepCallable<ListQuery[keyof ListQuery], Array<Model>>;
    };
    declare const createSyntaxFactory: (options: QueryHandlerOptions | (() => QueryHandlerOptions)) => {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
    export default function (options: QueryHandlerOptions | (() => QueryHandlerOptions)): {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
}
"
`;

exports[`module with no modules 1`] = `
"declare module "shiro-orm" {
    declare const get: {};
    declare const count: {};
    declare const set: {};
    declare const add: {};
    declare const remove: {};
    declare const batch: <TQueries extends [
        Promise,
        ...Array<Promise>
    ] | Array<Promise>>(operations: () => TQueries, queryOptions?: Record<string, unknown>) => Promise<PromiseTuple<TQueries>>;
    declare const list: {
        /* List all model definitions */
        models: DeepCallable<ListQuery[keyof ListQuery], Array<Model>>;
    };
    declare const createSyntaxFactory: (options: QueryHandlerOptions | (() => QueryHandlerOptions)) => {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
    export default function (options: QueryHandlerOptions | (() => QueryHandlerOptions)): {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
}
"
`;

exports[`module with multiple models 1`] = `
"declare module "shiro-orm" {
    export type Account = ResultRecord & {
        email: string;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
    export type Post = ResultRecord & {
        description: string;
        title: string;
    };
    export type Posts = Array<Post> & {
        moreBefore?: string;
        moreAfter?: string;
    };
    declare const get: {
        /* Get a single account record */
        account: DeepCallable<GetQuery[keyof GetQuery], Account | null>;
        /* Get multiple account records */
        accounts: DeepCallable<GetQuery[keyof GetQuery], Accounts>;
        /* Get a single post record */
        post: DeepCallable<GetQuery[keyof GetQuery], Post | null>;
        /* Get multiple post records */
        posts: DeepCallable<GetQuery[keyof GetQuery], Posts>;
    };
    declare const count: {
        /* Count multiple account records */
        accounts: DeepCallable<CountQuery[keyof CountQuery], number>;
        /* Count multiple post records */
        posts: DeepCallable<CountQuery[keyof CountQuery], number>;
    };
    declare const set: {
        /* Set a single account record */
        account: DeepCallable<SetQuery[keyof SetQuery], Account | null>;
        /* Set multiple account records */
        accounts: DeepCallable<SetQuery[keyof SetQuery], Accounts>;
        /* Set a single post record */
        post: DeepCallable<SetQuery[keyof SetQuery], Post | null>;
        /* Set multiple post records */
        posts: DeepCallable<SetQuery[keyof SetQuery], Posts>;
    };
    declare const add: {
        /* Add a single account record */
        account: DeepCallable<AddQuery[keyof AddQuery], Account | null>;
        /* Add a single post record */
        post: DeepCallable<AddQuery[keyof AddQuery], Post | null>;
    };
    declare const remove: {
        /* Remove a single account record */
        account: DeepCallable<RemoveQuery[keyof RemoveQuery], Account | null>;
        /* Remove multiple account records */
        accounts: DeepCallable<RemoveQuery[keyof RemoveQuery], Accounts>;
        /* Remove a single post record */
        post: DeepCallable<RemoveQuery[keyof RemoveQuery], Post | null>;
        /* Remove multiple post records */
        posts: DeepCallable<RemoveQuery[keyof RemoveQuery], Posts>;
    };
    declare const batch: <TQueries extends [
        Promise,
        ...Array<Promise>
    ] | Array<Promise>>(operations: () => TQueries, queryOptions?: Record<string, unknown>) => Promise<PromiseTuple<TQueries>>;
    declare const list: {
        /* List all model definitions */
        models: DeepCallable<ListQuery[keyof ListQuery], Array<Model>>;
    };
    declare const createSyntaxFactory: (options: QueryHandlerOptions | (() => QueryHandlerOptions)) => {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
    export default function (options: QueryHandlerOptions | (() => QueryHandlerOptions)): {
        get: typeof get;
        count: typeof count;
        set: typeof set;
        add: typeof add;
        remove: typeof remove;
        list: typeof list;
        create: typeof import("shiro-orm").create;
        alter: typeof import("shiro-orm").alter;
        drop: typeof import("shiro-orm").drop;
        batch: typeof import("shiro-orm").batch;
        sql: typeof import("shiro-orm").sql;
        sqlBatch: typeof import("shiro-orm").sqlBatch;
    };
}
"
`;
