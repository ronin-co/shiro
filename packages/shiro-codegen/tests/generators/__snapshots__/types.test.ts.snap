// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`types a basic model 1`] = `
"export type Account = ResultRecord & {
    avatar: StoredObject;
    email: string;
    isActive: boolean;
    lastActiveAt: Date;
    name: string;
    rewardPoints: number;
    settings: (JsonObject | JsonArray);
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with a summary 1`] = `
"/**
 * A user account.
 */
export type Account = ResultRecord & {
    email: string;
    name: string;
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with an invalid field type 1`] = `
"export type Account = ResultRecord & {
    name: unknown;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with a link field 1`] = `
"export type Account = ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Post<TUsing extends Array<"author"> | "all" = [
]> = ResultRecord & {
    author: ResolveSchema<Account, TUsing, "author">;
    title: string;
};
export type Posts<TUsing extends Array<"author"> | "all" = [
]> = Array<Post<TUsing>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with a many-to-many link field 1`] = `
"export type Account = ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Space<TUsing extends Array<"members"> | "all" = [
]> = ResultRecord & {
    members: ResolveSchema<Array<Account>, TUsing, "members">;
    name: string;
};
export type Spaces<TUsing extends Array<"members"> | "all" = [
]> = Array<Space<TUsing>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with a link field that does not exist 1`] = `
"export type Account = ResultRecord & {
    email: string;
    latestPost: unknown;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types a model with nested fields 1`] = `
"/**
 * A user account.
 */
export type Account = ResultRecord & {
    name: string;
    nested: {
        bar: number;
        foo: string;
    };
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;
